## @file
# Assign reviewers from .github/REVIEWERS using CODEOWNERS syntax
#
# Copyright (c) 2022, Intel Corporation. All rights reserved.<BR>
# SPDX-License-Identifier: BSD-2-Clause-Patent
##

name: Assign reviewers from .github/REVIEWERS using CODEOWNERS syntax

on:
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - master
      - 'stable/**'

permissions:
    pull-requests: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  assign_reviewers:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - run: git log --oneline -n 20
      - uses: actions/setup-python@v2
        with:
          cache: 'pip'
          cache-dependency-path: '.github/workflows/workflows-pip-requirements.txt'
      - run: pip install -r .github/workflows/workflows-pip-requirements.txt
      - name: Assign Reviewers from .github/REVIEWERS
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import json
            from   codeowners import CodeOwners
            from   git        import Git
            from   github     import Github
            Hub = None
            HubPullRequest = None
            LocalRepo = Git('.')
            LocalRepo.fetch('origin','${{github.event.pull_request.base.ref}}', depth=1)
            AllReviewers = CodeOwners(LocalRepo.show('origin/${{github.event.pull_request.base.ref}}:.github/REVIEWERS'))
            LocalRepo.fetch('origin', '${{ github.event.pull_request.head.sha }}', depth=${{ github.event.pull_request.commits }} + 1)
            ModifiedFiles = LocalRepo.diff(
                              '${{github.event.pull_request.head.sha}}~${{ github.event.pull_request.commits }}..${{github.event.pull_request.head.sha}}',
                              '--name-only'
                              )
            FileReviewers = set()
            for File in ModifiedFiles.split():
                print ('File:', File, AllReviewers.of(File))
                FileReviewers |= set(AllReviewers.of(File))
            UserReviewers = set()
            TeamReviewers = set()
            for FileReviewer in FileReviewers:
                if FileReviewer[0] == 'USERNAME':
                    UserReviewers.add (FileReviewer[1][1:])
                elif FileReviewer[0] == 'TEAM':
                    TeamReviewers.add (FileReviewer[1][1:])
                elif FileReviewer[0] == 'EMAIL':
                    if not Hub:
                        Hub = Github('${{ secrets.GITHUB_TOKEN }}')
                    SearchResult = Hub.search_users(FileReviewer[1] + ' in:email')
                    print ('Search:', FileReviewer[1], [x for x in SearchResult])
                    for User in SearchResult:
                        if FileReviewer[1].lower() == User.email.lower():
                            UserReviewers.add (User.login)
                            break
            Author = '${{ github.event.pull_request.user.login }}'
            UserReviewers -= set([Author] + [x['login'] for x in json.loads ('''${{ toJSON(github.event.pull_request.requested_reviewers)}}''')])
            TeamReviewers -= set([x['login'] for x in json.loads ('''${{ toJSON(github.event.pull_request.requested_teams)}}''')])
            if UserReviewers or TeamReviewers:
                print ('Add Reviewers User:', UserReviewers, 'Team:', TeamReviewers)
                if not Hub:
                    Hub = Github('${{ secrets.GITHUB_TOKEN }}')
                HubPullRequest = Hub.get_repo('${{ github.event.repository.full_name }}').get_pull(${{ github.event.pull_request.number }})
                HubPullRequest.create_review_request(list(UserReviewers), list(TeamReviewers))
            if Author not in set([x['login'] for x in json.loads ('''${{ toJSON(github.event.pull_request.assignees)}}''')]):
                print ('Add Assignee:', Author)
                if not Hub:
                    Hub = Github('${{ secrets.GITHUB_TOKEN }}')
                if not HubPullRequest:
                    HubPullRequest = Hub.get_repo('${{ github.event.repository.full_name }}').get_pull(${{ github.event.pull_request.number }})
                HubPullRequest.add_to_assignees(Author)
